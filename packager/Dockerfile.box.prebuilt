FROM arm64v8/ubuntu:22.04

ENV DEBIAN_FRONTEND=noninteractive LANG=C.UTF-8 TZ=Asia/Shanghai

# 启用多架构
RUN set -eux; \
    dpkg --add-architecture i386; \
    dpkg --add-architecture amd64

# 重写 arm64 主源：仅限 arm64 + main（避免被用于 i386/amd64）
RUN set -eux; \
    tee /etc/apt/sources.list <<'EOF'
deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy main
deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-updates main
deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-security main
EOF

# 为 i386 配置 archive 源：仅 main
RUN set -eux; \
    tee /etc/apt/sources.list.d/i386.list <<'EOF'
deb [arch=i386] http://archive.ubuntu.com/ubuntu jammy main
deb [arch=i386] http://archive.ubuntu.com/ubuntu jammy-updates main
deb [arch=i386] http://archive.ubuntu.com/ubuntu jammy-security main
EOF

# 为 amd64 配置 archive 源：仅 main
RUN set -eux; \
    tee /etc/apt/sources.list.d/amd64.list <<'EOF'
deb [arch=amd64] http://archive.ubuntu.com/ubuntu jammy main
deb [arch=amd64] http://archive.ubuntu.com/ubuntu jammy-updates main
deb [arch=amd64] http://archive.ubuntu.com/ubuntu jammy-security main
EOF

# 更新并安装最小运行库（SteamCMD 用 i386；DST 专服用 amd64）与基础工具
RUN set -eux; \
    apt-get update; \
    apt-get install -y --no-install-recommends \
      ca-certificates curl wget xz-utils unzip procps screen gnupg \
      libc6:i386 libstdc++6:i386 libgcc-s1:i386 libcurl4:i386 zlib1g:i386 \
      libc6:amd64 libstdc++6:amd64 libgcc-s1:amd64 libcurl4:amd64 zlib1g:amd64 \
      libc6:arm64 libstdc++6:armhf libgcc-s1:armhf \
    update-ca-certificates; \
    rm -rf /var/lib/apt/lists/*

# 复制运行所需文件（CI 会保证存在；若部分可选缺失，建议在 CI 中创建占位）
WORKDIR /app
COPY dist /app/dist
COPY dst-admin-go /app/dst-admin-go
COPY docker-entrypoint.sh /app/docker-entrypoint.sh
RUN chmod +x /app/dst-admin-go /app/docker-entrypoint.sh

# 可选
COPY static /app/static
COPY config.yml /app/config.yml
COPY docker_dst_config /app/docker_dst_config
COPY dst_config /app/dst_config

EXPOSE 8082/tcp 10888/udp 10998/udp 10999/udp

ENTRYPOINT ["/app/docker-entrypoint.sh"]
