name: build-single-tag-arm64

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'tag'
        required: true

env:
  IMAGE: docker.io/starlain/dst-admin-go-arm64

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: false

      - name: Switch to tag
        run: |
          set -euo pipefail
          TAG="${{ inputs.tag }}"
          git checkout -f "tags/${TAG}"

      - name: Prepare directories
        id: prep
        run: |
          set -euo pipefail
          CTX="/tmp/buildctx"
          REL="/tmp/release"
          PKG="/tmp/packager"
          mkdir -p "${CTX}" "${REL}" "${PKG}"
          echo "CTX=${CTX}" >> $GITHUB_OUTPUT
          echo "REL=${REL}" >> $GITHUB_OUTPUT
          echo "PKG=${PKG}" >> $GITHUB_OUTPUT

      - name: Fetch packager files from main
        run: |
          set -euo pipefail
          PKG="${{ steps.prep.outputs.PKG }}"
          # Ensure we have the latest main from origin
          git fetch origin main:refs/remotes/origin/main
          # Extract packager files from main into a temp folder
          git show origin/main:packager/Dockerfile.box.prebuilt > "${PKG}/Dockerfile.box.prebuilt"
          git show origin/main:packager/docker-entrypoint.wrap.sh > "${PKG}/docker-entrypoint.wrap.sh"
          chmod +x "${PKG}/docker-entrypoint.wrap.sh"

      - name: Download and extract release assets (non-arch files)
        run: |
          set -euo pipefail
          TAG="${{ inputs.tag }}"
          REL="${{ steps.prep.outputs.REL }}"
          URL="https://github.com/carrot-hu23/dst-admin-go/releases/download/${TAG}/dst-admin-go.${TAG}.tar.gz"

          echo "Downloading: ${URL}"
          curl -fL --retry 5 --retry-delay 3 -o /tmp/release.tgz "${URL}"
          tar -xzf /tmp/release.tgz -C "${REL}"

          ROOT="${REL}"
          SUBDIRS=$(find "${REL}" -mindepth 1 -maxdepth 1 -type d | wc -l)
          if [ "${SUBDIRS}" -eq 1 ]; then
            CANDIDATE=$(find "${REL}" -mindepth 1 -maxdepth 1 -type d)
            if [ -d "${CANDIDATE}/dist" ] || [ -d "${CANDIDATE}/static" ] || [ -f "${CANDIDATE}/config.yml" ]; then
              ROOT="${CANDIDATE}"
            fi
          fi
          echo "Release root: ${ROOT}"

          rm -rf dist static config.yml docker_dst_config dst_config || true
          [ -d "${ROOT}/dist" ] && rsync -a "${ROOT}/dist/" ./dist/ || true
          [ -d "${ROOT}/static" ] && rsync -a "${ROOT}/static/" ./static/ || true
          [ -f "${ROOT}/config.yml" ] && cp -f "${ROOT}/config.yml" ./config.yml || true
          [ -d "${ROOT}/docker_dst_config" ] && rsync -a "${ROOT}/docker_dst_config/" ./docker_dst_config/ || true
          [ -d "${ROOT}/dst_config" ] && rsync -a "${ROOT}/dst_config/" ./dst_config/ || true

      - name: Fallback to repo files when release assets missing
        run: |
          set -euo pipefail
          # Silent fallbacks: use repo copies at this tag if present
          [ -d static ] || { [ -d ./static ] && echo "Using repo static"; }
          [ -d docker_dst_config ] || { [ -d ./docker_dst_config ] && echo "Using repo docker_dst_config"; }
          [ -d dst_config ] || { [ -d ./dst_config ] && echo "Using repo dst_config"; }
          [ -f config.yml ] || { [ -f ./config.yml ] && echo "Using repo config.yml"; }

      - name: Validate dist presence
        run: |
          set -euo pipefail
          if [ ! -f dist/index.html ]; then
            echo "ERROR: dist/index.html not found after extraction and fallback."
            exit 1
          fi

      - name: Build ARM64 dst-admin-go from source
        run: |
          set -euo pipefail
          set +e
          echo "Attempt 1: CGO_DISABLED cross-compile to arm64"
          CGO_ENABLED=0 GOOS=linux GOARCH=arm64 GOFLAGS='-buildvcs=false' go build -o dst-admin-go .
          STATUS=$?
          set -e
          if [ $STATUS -ne 0 ] || [ ! -s dst-admin-go ]; then
            echo "Attempt 1 failed; Attempt 2: build inside linux/arm64 container with CGO"
            docker run --rm --platform linux/arm64 -v "$PWD":/src -w /src golang:1.21 bash -c '
              set -e
              apt-get update && apt-get install -y --no-install-recommends gcc libsqlite3-dev ca-certificates && rm -rf /var/lib/apt/lists/*
              export CGO_ENABLED=1 GOOS=linux GOARCH=arm64 GOFLAGS="-buildvcs=false"
              go mod download
              go build -o dst-admin-go .
            '
          fi
          chmod +x dst-admin-go

      - name: Assemble minimal build context
        run: |
          set -euo pipefail
          CTX="${{ steps.prep.outputs.CTX }}"
          PKG="${{ steps.prep.outputs.PKG }}"
          mkdir -p "${CTX}"
          cp -a dist "${CTX}/dist"
          [ -d static ] && cp -a static "${CTX}/static" || true
          [ -f config.yml ] && cp -a config.yml "${CTX}/config.yml" || true
          [ -d docker_dst_config ] && cp -a docker_dst_config "${CTX}/docker_dst_config" || true
          [ -d dst_config ] && cp -a dst_config "${CTX}/dst_config" || true
          cp -a dst-admin-go "${CTX}/dst-admin-go"

          # Copy packager files fetched from main
          cp "${PKG}/Dockerfile.box.prebuilt" "${CTX}/Dockerfile"
          cp "${PKG}/docker-entrypoint.wrap.sh" "${CTX}/docker-entrypoint.sh"
          chmod +x "${CTX}/docker-entrypoint.sh"

      - name: Set up buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push (linux/arm64)
        run: |
          set -euo pipefail
          CTX="${{ steps.prep.outputs.CTX }}"
          TAG="${{ inputs.tag }}-arm64"
          docker buildx build \
            --platform linux/arm64 \
            -t "${IMAGE}:${TAG}" \
            --push "${CTX}"

      - name: Final summary
        run: |
          echo "Pushed image: ${IMAGE}:${{ inputs.tag }}-arm64"
